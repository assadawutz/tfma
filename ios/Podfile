platform :ios, '13.0'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. Run `flutter pub get` first"
  end
  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)

    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
    end
  end

  installer.pod_targets.each do |pod_target|
    pod_target.build_configurations.each do |config|
      # ถ้าเครื่องเป็น Intel → simulator เป็น x86_64 → exclude arm64 (ถ้าจำเป็น)
      # ถ้าเครื่องเป็น Apple Silicon → simulator เป็น arm64 → exclude x86_64 หรืออื่น ๆ ตามความจำเป็น

      # ใช้ conditional: ถ้าบรรทัด ENV ระบุ หรือ check arch
      # แต่ Podfile ไม่รู้จัก runtime arch ของเครื่องได้โดยตรง — คุณอาจใช้ ENV var ที่คุณตั้งก่อนรัน pod install

      # ตัวอย่าง: สมมติคุณตั้ง ENV["SIMULATOR_ARCH_EXCLUDE"] ให้เป็นค่าเหมาะสมก่อนรัน pod install
      archs_to_exclude = ENV['SIMULATOR_ARCH_EXCLUDE'] || 'arm64'
      config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "#{config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]']}, #{archs_to_exclude}".strip
    end
  end
end
